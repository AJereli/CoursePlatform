-- MySQL Script generated by MySQL Workbench
-- Tue Mar  6 07:37:08 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema CoursePlatformDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema CoursePlatformDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `CoursePlatformDB` DEFAULT CHARACTER SET utf8 ;
USE `CoursePlatformDB` ;

-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`User` (
  `id` INT NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `password` VARCHAR(256) NOT NULL,
  `rang` INT NOT NULL,
  `access_token` VARCHAR(512) NOT NULL,
  `courses` VARCHAR(4096) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`Achievement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`Achievement` (
  `id` INT NOT NULL,
  `information` MEDIUMTEXT NOT NULL,
  `image` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`UserAchievement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`UserAchievement` (
  `id` INT NOT NULL,
  `User_id` INT NOT NULL,
  `Achievement_id` INT NOT NULL,
  PRIMARY KEY (`id`, `User_id`, `Achievement_id`),
  INDEX `fk_UserAchievement_User_idx` (`User_id` ASC),
  INDEX `fk_UserAchievement_Achievement1_idx` (`Achievement_id` ASC),
  CONSTRAINT `fk_UserAchievement_User`
    FOREIGN KEY (`User_id`)
    REFERENCES `CoursePlatformDB`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_UserAchievement_Achievement1`
    FOREIGN KEY (`Achievement_id`)
    REFERENCES `CoursePlatformDB`.`Achievement` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`UserCourseTask`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`UserCourseTask` (
  `idUserCourseTask` INT NOT NULL,
  `mark` INT NOT NULL,
  `CourseTask_id` INT NOT NULL,
  `User_id` INT NOT NULL,
  PRIMARY KEY (`idUserCourseTask`, `CourseTask_id`, `User_id`),
  INDEX `fk_UserCourseTask_User1_idx` (`User_id` ASC),
  CONSTRAINT `fk_UserCourseTask_User1`
    FOREIGN KEY (`User_id`)
    REFERENCES `CoursePlatformDB`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`Course`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`Course` (
  `id` INT NOT NULL,
  `name` VARCHAR(512) NOT NULL,
  `InSkills` MEDIUMTEXT NOT NULL,
  `OutSkills` MEDIUMTEXT NOT NULL,
  `User_id` INT NOT NULL,
  PRIMARY KEY (`id`, `User_id`),
  INDEX `fk_Course_User1_idx` (`User_id` ASC),
  CONSTRAINT `fk_Course_User1`
    FOREIGN KEY (`User_id`)
    REFERENCES `CoursePlatformDB`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`Lection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`Lection` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `Title` VARCHAR(256) NOT NULL,
  `information` LONGTEXT NOT NULL,
  `images` MEDIUMTEXT NOT NULL,
  `notes` LONGTEXT NOT NULL,
  `Lectioncol` VARCHAR(45) NULL,
  `Course_id` INT NOT NULL,
  PRIMARY KEY (`id`, `Course_id`),
  INDEX `fk_Lection_Course1_idx` (`Course_id` ASC),
  CONSTRAINT `fk_Lection_Course1`
    FOREIGN KEY (`Course_id`)
    REFERENCES `CoursePlatformDB`.`Course` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`LectionTask`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`LectionTask` (
  `id` INT NOT NULL,
  `task` LONGTEXT NOT NULL,
  `answer` LONGTEXT NOT NULL,
  `isTest` INT NOT NULL,
  `testAns` INT NOT NULL,
  `Lection_id` INT NOT NULL,
  `Lection_Course_id` INT NOT NULL,
  PRIMARY KEY (`id`, `Lection_id`, `Lection_Course_id`),
  INDEX `fk_LectionTask_Lection1_idx` (`Lection_id` ASC, `Lection_Course_id` ASC),
  CONSTRAINT `fk_LectionTask_Lection1`
    FOREIGN KEY (`Lection_id` , `Lection_Course_id`)
    REFERENCES `CoursePlatformDB`.`Lection` (`id` , `Course_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`UserLectionTask`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`UserLectionTask` (
  `idUserLectionTask` INT NOT NULL,
  `mark` INT NOT NULL,
  `User_id` INT NOT NULL,
  `LectionTask_id` INT NOT NULL,
  `LectionTask_Lection_id` INT NOT NULL,
  `LectionTask_Lection_Course_id` INT NOT NULL,
  PRIMARY KEY (`idUserLectionTask`, `LectionTask_Lection_id`, `LectionTask_Lection_Course_id`, `LectionTask_id`),
  INDEX `fk_UserLectionTask_User1_idx` (`User_id` ASC),
  INDEX `fk_UserLectionTask_LectionTask1_idx` (`LectionTask_id` ASC, `LectionTask_Lection_id` ASC, `LectionTask_Lection_Course_id` ASC),
  CONSTRAINT `fk_UserLectionTask_User1`
    FOREIGN KEY (`User_id`)
    REFERENCES `CoursePlatformDB`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_UserLectionTask_LectionTask1`
    FOREIGN KEY (`LectionTask_id` , `LectionTask_Lection_id` , `LectionTask_Lection_Course_id`)
    REFERENCES `CoursePlatformDB`.`LectionTask` (`id` , `Lection_id` , `Lection_Course_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`Comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`Comment` (
  `id` INT NOT NULL,
  `comment` VARCHAR(45) NOT NULL,
  `date` DATETIME NOT NULL,
  `User_id` INT NOT NULL,
  `UserCourseTask_idUserCourseTask` INT NOT NULL,
  `UserCourseTask_CourseTask_id` INT NOT NULL,
  `UserLectionTask_idUserLectionTask` INT NOT NULL,
  `UserLectionTask_LectionTask_Lection_id` INT NOT NULL,
  `UserLectionTask_LectionTask_Lection_Course_id` INT NOT NULL,
  `UserLectionTask_LectionTask_id` INT NOT NULL,
  PRIMARY KEY (`id`, `User_id`, `UserCourseTask_idUserCourseTask`, `UserCourseTask_CourseTask_id`, `UserLectionTask_idUserLectionTask`, `UserLectionTask_LectionTask_Lection_id`, `UserLectionTask_LectionTask_Lection_Course_id`, `UserLectionTask_LectionTask_id`),
  INDEX `fk_Comment_User1_idx` (`User_id` ASC),
  INDEX `fk_Comment_UserCourseTask1_idx` (`UserCourseTask_idUserCourseTask` ASC, `UserCourseTask_CourseTask_id` ASC),
  INDEX `fk_Comment_UserLectionTask1_idx` (`UserLectionTask_idUserLectionTask` ASC, `UserLectionTask_LectionTask_Lection_id` ASC, `UserLectionTask_LectionTask_Lection_Course_id` ASC, `UserLectionTask_LectionTask_id` ASC),
  CONSTRAINT `fk_Comment_User1`
    FOREIGN KEY (`User_id`)
    REFERENCES `CoursePlatformDB`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comment_UserCourseTask1`
    FOREIGN KEY (`UserCourseTask_idUserCourseTask` , `UserCourseTask_CourseTask_id`)
    REFERENCES `CoursePlatformDB`.`UserCourseTask` (`idUserCourseTask` , `CourseTask_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comment_UserLectionTask1`
    FOREIGN KEY (`UserLectionTask_idUserLectionTask` , `UserLectionTask_LectionTask_Lection_id` , `UserLectionTask_LectionTask_Lection_Course_id` , `UserLectionTask_LectionTask_id`)
    REFERENCES `CoursePlatformDB`.`UserLectionTask` (`idUserLectionTask` , `LectionTask_Lection_id` , `LectionTask_Lection_Course_id` , `LectionTask_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CoursePlatformDB`.`CourseTask`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CoursePlatformDB`.`CourseTask` (
  `id` INT NOT NULL,
  `task` LONGTEXT NOT NULL,
  `answer` LONGTEXT NOT NULL,
  `Course_id` INT NOT NULL,
  `Course_User_id` INT NOT NULL,
  `UserCourseTask_idUserCourseTask` INT NOT NULL,
  `UserCourseTask_CourseTask_id` INT NOT NULL,
  `UserCourseTask_User_id` INT NOT NULL,
  PRIMARY KEY (`id`, `Course_id`, `Course_User_id`, `UserCourseTask_idUserCourseTask`, `UserCourseTask_CourseTask_id`, `UserCourseTask_User_id`),
  INDEX `fk_CourseTask_Course1_idx` (`Course_id` ASC, `Course_User_id` ASC),
  INDEX `fk_CourseTask_UserCourseTask1_idx` (`UserCourseTask_idUserCourseTask` ASC, `UserCourseTask_CourseTask_id` ASC, `UserCourseTask_User_id` ASC),
  CONSTRAINT `fk_CourseTask_Course1`
    FOREIGN KEY (`Course_id` , `Course_User_id`)
    REFERENCES `CoursePlatformDB`.`Course` (`id` , `User_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CourseTask_UserCourseTask1`
    FOREIGN KEY (`UserCourseTask_idUserCourseTask` , `UserCourseTask_CourseTask_id` , `UserCourseTask_User_id`)
    REFERENCES `CoursePlatformDB`.`UserCourseTask` (`idUserCourseTask` , `CourseTask_id` , `User_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
